/*
*/

#include <U8g2lib.h>
#include <Wire.h>

#define time_delay 2000

/*  Next, object called u8g2 is created, with the following line of code:
  U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);
  The created object represents the screen itself and it is used to control the
  screen. The U8g2 library can be used for many other OLED screens, thus
  there are many constructors in the sketch examples from the library.
*/
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);
// U8G2_R0   No rotation, landscape
// Use U8X8_PIN_NONE if there is no switch connected to the pin

/* ****************************************************************************************************
 * **************************************************************************************************** */
void u8g2_prepare() 
{
  /*  setFont sets the u8g2 font. */
  u8g2.setFont(u8g2_font_6x10_tf);
  /*  setFontRefHeightExtendedText is used for drawing characters on the screen. */
  u8g2.setFontRefHeightExtendedText();
/*  setDrawColor has one argument = an integer number which represents a color index for all drawing functions. 
 *  Font drawing procedures use this argument to set the foreground color. 
 *  The default value is 1. 
 *  If it is set to 0, then the space around the character is lit up, and the character is not. 
 *  Argument value 2 can also be used, but there is no difference from 0.  */
  u8g2.setDrawColor(1);
  /* setFontPosTop controls the character position in one line of the text. 
   *  The function has a couple of versions: 
   *  setFontPosBaseLine, setFontPosCenter, setFontPosBottom
   *  Their purpose is to change the position of the characters in the one line.*/
  u8g2.setFontPosTop();
  /* setFontDirection has one argument which is an integer number which represents direction of the text. 
   * 0 = 0°
   * 1 = 90°
   * 2 = 180° 
   * and 3 = 270° */
  u8g2.setFontDirection(0);
}


/* ****************************************************************************************************
 *  Dessine deux rectangles (plein & contour seul)
 * **************************************************************************************************** */
void dsplayGenre() 
{
  // Famille des fontes Lucida: 08 - 10 - 12 - 13 - 14 - 16 - 18 - 19 - 24 
  u8g2.setFont(u8g2_font_luIS14_tf); 
  u8g2.drawStr(10, 30, "Rock n'Roll");   // A centrer
  u8g2.drawRFrame(2, 20, 124, 34, 7);
}

/* ****************************************************************************************************
 *  Dessine un cercle plein et un cercle vide
 * **************************************************************************************************** */
void u8g2_disc_circle() 
{
  u8g2.drawStr(0, 0, "drawDisc");
  u8g2.drawDisc(10, 18, 9);
  u8g2.drawStr(60, 0, "drawCircle");
  u8g2.drawCircle(70, 18, 9);
}


/* ****************************************************************************************************
 *  dessine une étoile
 * **************************************************************************************************** */
void animStar(int pos) 
{
  drawStar(pos, 2.0);
  u8g2.sendBuffer();
  delay(40);
  drawStar(pos,3.0);
  u8g2.sendBuffer();
  delay(40);
  drawStar(pos,4.0);
  u8g2.sendBuffer();
  delay(40);
  drawStar(pos,5.0);
  u8g2.sendBuffer();
  delay(120);
//  drawStar(pos,6.0);
//  u8g2.sendBuffer();
}

/* ****************************************************************************************************
 *  dessine une étoile
 * **************************************************************************************************** */
void drawStar(int pos, float a) 
{
  int x0 = pos*36 -8;
  int y0 = 35;
  float sa  = a*0.9510;    // sin(2pi/5)
  float ca  = a*0.3090;    // cos(2pi/5)
  float s2a = a*0.5878;    // sin(2x2pi/5)
  float c2a = a*0.8090;    // cos(2x2pi/5)
  // Triangle du haut
  u8g2.drawTriangle(x0-a, y0,    x0, y0-3*a,         x0+a, y0);
  // triangles lateraux
  u8g2.drawTriangle(x0, y0-3*ca, x0+3*sa, y0-3*ca,   x0, y0+a);
  u8g2.drawTriangle(x0, y0-3*ca, x0-3*sa, y0-3*ca,   x0, y0+a);
  // triangles pieds
  u8g2.drawTriangle(x0+a, y0,    x0+3*s2a, y0+3*c2a, x0, y0+a);
  u8g2.drawTriangle(x0-a, y0,    x0-3*s2a, y0+3*c2a, x0, y0+a);
}


/* ****************************************************************************************************
 *  Texte de 2 lignes dans un cadre
 * **************************************************************************************************** */
void displayAlbum() 
{
  // Famille des fontes Lucida: 08 - 10 - 12 - 13 - 14 - 16 - 18 - 19 - 24 
  u8g2.setFont(u8g2_font_luRS10_tf); 
  u8g2.drawStr(6, 26, "Tout ce qui brille");
  u8g2.drawUTF8(6, 42, "(éèàùêç)");  // 30 char max
  u8g2.drawRFrame(2, 18, 124, 44, 7);
}

/* ****************************************************************************************************
 *  Texte de 2 lignes dans un cadre
 * **************************************************************************************************** */
void displayArtist() 
{
  // Famille des fontes DaFont: 10
  u8g2.setFont(u8g2_font_DigitalDisco_tf); 
  u8g2.drawStr(6, 26, " The Mamas & ");
  u8g2.drawStr(6, 42, "  The Papas");  // 30 char max
  u8g2.drawRFrame(2, 18, 124, 44, 7);
}

/* ****************************************************************************************************
 *  
 * **************************************************************************************************** */
void displayYear() 
{
const char* text = "1964";

   // font numérique Old Standard = 18 - 21 - 26 - 29 - 35 - 41
   u8g2.setFont(u8g2_font_osb29_tn);   // u8g2_font_ncenB24_tn
   u8g2.setFontMode(0);                // enable transparent mode, which is faster
   u8g2.drawStr(20, 20, text);        // draw the text

}

/* ****************************************************************************************************
 *  Menubox en haut
 * **************************************************************************************************** */
void displayMenu()
{
  u8g2.drawBox(0, 0, 128, 14);
  u8g2.setFont(u8g2_font_halftone_tf); 
  u8g2.setDrawColor(0);
  u8g2.drawStr(2, 0, "  Genre: rock");
  u8g2.setDrawColor(1);
}


//  width = u8g2.getUTF8Width(text);    // calculate the pixel width of the text

/* ****************************************************************************************************
 *  dessine quelques caractères spéciaux
 * **************************************************************************************************** */
void u8g2_unicode() 
{
  const char COPYRIGHT_SYMBOL[] = {0xa9, '\0'};
  
  u8g2.drawStr(0, 0, "Unicode");
  u8g2.setFont(u8g2_font_unifont_t_symbols);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
  u8g2.drawUTF8(10, 20, "☀");
  u8g2.drawUTF8(30, 20, "☁");
  u8g2.drawUTF8(50, 20, "☂");
  u8g2.drawUTF8(70, 20, "☔");
  u8g2.drawUTF8(95, 20, COPYRIGHT_SYMBOL);  // COPYRIGHT SIMBOL
  u8g2.drawUTF8(115, 15, "\xb0");           // ° DEGREE SYMBOL
}

/* ****************************************************************************************************
 *  dessine le logo AZ-Delivery
 * **************************************************************************************************** */
#define image_width 128
#define image_height 64
static const unsigned char image_bits[] U8X8_PROGMEM = {
// 'lisa-162x64', 128x64px
// const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb3, 0x80, 0x00, 0x13, 0xe0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x18, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x00, 0x0e, 0xf8, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x78, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x7e, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0e, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x08, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xfe, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xfc, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xf8, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xf8, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xe0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x40, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x70, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x20, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x20, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x10, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x10, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void u8g2_bitmap() 
{
  u8g2.drawXBMP(0, 0, image_width, image_height, image_bits);
}


/* ****************************************************************************************************
 *  SETUP
 * **************************************************************************************************** */
void setup(void) 
{
  // begin() function will reset, configure, clear and disable power save mode of the display
  u8g2.begin();
  u8g2_prepare();
}


/* ****************************************************************************************************
 *  LOOP
 * **************************************************************************************************** */
void loop(void) 
{
  // Effacement
  u8g2_prepare();

  // Affiche une image
  u8g2.clearBuffer();
  u8g2_bitmap();
  u8g2.sendBuffer();
  delay(time_delay);

  // anime 3 étoiles
  u8g2.clearBuffer();
  u8g2.drawRFrame(2, 20, 124, 32, 7);
  animStar(1);
  animStar(2);
  animStar(3);
  delay(5*time_delay);

  // Affiche l'année
  u8g2.clearBuffer();
  displayMenu();
  displayYear();
  u8g2.sendBuffer();
  delay(time_delay);
  
  // Efface l'année
  u8g2.clearBuffer();
  displayMenu();
  u8g2.sendBuffer();
  delay(time_delay);
  
  // Genre
  displayMenu();
  dsplayGenre();
  u8g2.sendBuffer();
  delay(time_delay);
 
  // Album
  u8g2.clearBuffer();
  displayMenu();
  displayAlbum();
  u8g2.sendBuffer();
  delay(time_delay);
 
  // Artist
  u8g2.clearBuffer();
  displayMenu();
  displayArtist();
  u8g2.sendBuffer();
  delay(time_delay);

}
